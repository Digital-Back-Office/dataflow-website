---
export interface Props {
  title: string
  image1: string
  image2: string
  logo: string
  link: string
}

const { title, image1, image2, logo, link } = Astro.props
import { getEntry } from 'astro:content'

const Data = await getEntry('apps', 'apps')
const button = Data.data.button
---

<div
  class='containerlearn w-full min-h-screen bg-[#F6F6F6] flex flex-col justify-center md:flex-row items-center card'
>
  <div
    class='w-full md:w-3/5 h-[40vh] md:h-[60vh] flex justify-center md:justify-end mb-10 md:mb-0'
  >
    <div
      data-aos='fade-up'
      data-aos-duration='800'
      class='h-max w-max rounded-2xl overflow-hidden opacity-1'
    >
      <img src={image1} class='h-full w-full' alt='Image 1' />
    </div>
  </div>
  <div
    class='w-full md:w-2/5 h-full flex flex-col items-center md:items-start justify-center pl-5 md:pl-10 pr-5 md:pr-[8%] overflow-hidden'
  >
    <div class='mb-10'>
      <img src={logo} alt='Logo' />
    </div>
    <p
      class='text-calc font-bold text-center md:text-start text-textblack w-full md:w-4/5 mb-5 md:mb-10'
    >
      {title}
    </p>
    <a href={link} target='_blank'>
      <button
        class='custom-button bg-white px-3 py-2 mb-2 duration-300 text-[#30BABA] rounded-lg shadow-md flex text-base items-center gap-x-2 hover:-translate-y-1'
        style='font-family: Roboto;'
      >
        {button}
        <img
          class='button-img'
          src='/assets/images/arrowright.svg'
          alt='Arrow Right'
        />
      </button>
    </a>
  </div>
</div>

<style>
  .custom-button:hover {
    background-color: #30baba;
    color: white;
  }

  .custom-button:hover .button-img {
    filter: brightness(0) invert(1);
  }
  @media (max-width: 500px) {
    .containerlearn {
      flex-direction: column-reverse;

      row-gap: 30px;
    }
  }
  .image1 {
    animation: fadeleft 1s;
    opacity: 1;
  }

  .image2 {
    animation: faderight 1s;
    opacity: 1;
  }

  @keyframes fadeleft {
    0% {
      transform: translate(-100%, -100%);
      opacity: 0;
    }
    100% {
      transform: translate(0, 0);
      opacity: 1;
    }
  }

  @keyframes faderight {
    0% {
      transform: translate(100%, 100%);
      opacity: 0;
    }
    100% {
      transform: translate(0, 0);
      opacity: 1;
    }
  }

  .fadetoplogo {
    animation: fadetoplogo 1s;
    opacity: 1;
  }

  .fadecentertitle {
    animation: fadecentertitle 1s;
    opacity: 1;
  }

  .fadebottombutton {
    animation: fadebottombutton 1s;
    opacity: 1;
  }

  @keyframes fadetoplogo {
    0% {
      transform: translateY(-200%);
      opacity: 0;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes fadecentertitle {
    0% {
      transform: translateX(200%);
      opacity: 0;
    }
    100% {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes fadebottombutton {
    0% {
      transform: translateY(200%);
      opacity: 0;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('.card')

    cards.forEach((card) => {
      const animatelogo = card.querySelector('.toplogo')
      const animatetitle = card.querySelector('.centertitle')
      const animatebutton = card.querySelector('.bottombutton')

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              animatelogo.classList.add('fadetoplogo')
              animatetitle.classList.add('fadecentertitle')
              animatebutton.classList.add('fadebottombutton')
            }
          })
        },
        {
          threshold: 0.5
        }
      )
    })
  })
</script>
