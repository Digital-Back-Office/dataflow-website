---
export interface Props {
  title: string;
  image1: string;
  image2: string;
  logo: string;
}

const { title, image1, image2, logo } = Astro.props;
import { getEntry } from "astro:content";

const Data = await getEntry("learn", "learn");
const button = Data.data.button;
const docsUrl = import.meta.env.VITE_DOCS_URL 

---

<div class="container py-32 w-full bg-[#F6F6F6] flex flex-col md:flex-row items-center card">
  <div class="imageanimateouter w-full md:w-3/5 h-[40vh] md:h-[60vh] flex justify-center md:justify-end mb-10 md:mb-0">
    <div class="w-4/5 h-full bg-[#E1E6FA] rounded-3xl relative">
      <div class="image1animate w-[70%] h-[50%] absolute left-[5%] top-[9%] rounded-2xl  overflow-hidden  opacity-0">
        <img src={image1} class="h-full w-full" alt="Image 1" />
      </div>
      <div class="image2animate w-[48%] h-[52%] absolute right-[5%] bottom-[9%] rounded-2xl  overflow-hidden  opacity-0">
        <img src={image2} class="h-full w-full" alt="Image 2" />
      </div>
    </div>
  </div>
  <div class="w-full md:w-2/5 h-full flex flex-col items-center md:items-start justify-center pl-5 md:pl-10 pr-5 md:pr-[8%] overflow-hidden">
    <div class="toplogo w-[40%] mb-10 opacity-0">
      <img src={logo} alt="Logo" />
    </div>
    <p class="centertitle text-calc  font-bold text-center md:text-start text-textblack w-full md:w-4/5 mb-5 md:mb-10 opacity-0" style="font-family: Arimo;">
      {title}
    </p>
    <a href={docsUrl}>
      <button class="bottombutton custom-button bg-white px-3 py-2 mb-2 duration-300 text-[#30BABA] opacity-0 rounded-lg shadow-md flex text-base items-center gap-x-2 hover:-translate-y-1" style="font-family: Roboto;">
        {button} <img class="button-img" src="/assets/images/arrowright.svg" alt="Arrow Right" />
      </button>
    </a>
  </div>
</div>

<style>
.custom-button:hover {
  background-color: #30BABA; /* Change button background color */
  color: white; /* Change text color */
}

.custom-button:hover .button-img {
  filter: brightness(0) invert(1); 
}

.image1 {
  animation: fadeleft 1s;
  opacity: 1;
}
@media (max-width: 500px) {
    .container {
      flex-direction: column-reverse;
      
      row-gap: 30px;
    }
   
  }

.image2 {
  animation: faderight 1s;
  opacity: 1;
}

@keyframes fadeleft {
  0% {
    transform: translate(-100%, -100%);
    opacity: 0;
  }
  100% {
    transform: translate(0, 0);
    opacity: 1;
  }
}

@keyframes faderight {
  0% {
    transform: translate(100%, 100%);
    opacity: 0;
  }
  100% {
    transform: translate(0, 0);
    opacity: 1;
  }
}

.fadetoplogo {
  animation: fadetoplogo 1s;
  opacity: 1;
}

.fadecentertitle {
  animation: fadecentertitle 1s;
  opacity: 1;
}

.fadebottombutton {
  animation: fadebottombutton 1s;
  opacity: 1;
}

@keyframes fadetoplogo {
  0% {
    transform: translateY(-200%);
    opacity: 0;
  }
  100% {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes fadecentertitle {
  0% {
    transform: translateX(200%);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes fadebottombutton {
  0% {
    transform: translateY(200%);
    opacity: 0;
  }
  100% {
    transform: translateY(0);
    opacity: 1;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const cards = document.querySelectorAll('.card');

  cards.forEach(card => {
    const animatedOuterDiv = card.querySelector('.imageanimateouter');
    const animatedDiv1 = card.querySelector('.image1animate');
    const animatedDiv2 = card.querySelector('.image2animate');
    const animatelogo = card.querySelector('.toplogo');
    const animatetitle = card.querySelector('.centertitle');
    const animatebutton = card.querySelector('.bottombutton');

    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          animatedDiv1.classList.add('image1');
          animatedDiv2.classList.add('image2');
          animatelogo.classList.add('fadetoplogo');
          animatetitle.classList.add('fadecentertitle');
          animatebutton.classList.add('fadebottombutton');
        }
      });
    }, {
      threshold: 0.5
    });

    observer.observe(animatedOuterDiv);
  });
});
</script>
