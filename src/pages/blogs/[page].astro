---
import BlogLayout from '../../layouts/BlogLayout.astro'
// import { posts } from '../../content/blog/data'
import { getCollection } from 'astro:content'
import BlogGrid from '../../components/blog/BlogGrid.astro'

const blogs = await getCollection('blogs')
let updatedposts = blogs || []

const POSTS_PER_PAGE = 6

const { page } = Astro.params
const currentPage = parseInt(page) || 1

const totalPosts = blogs.length
const totalPages = Math.ceil(totalPosts / POSTS_PER_PAGE)
const startIndex = (currentPage - 1) * POSTS_PER_PAGE
const endIndex = startIndex + POSTS_PER_PAGE
const paginatedPosts = blogs.slice(startIndex, endIndex).sort((a, b) => a.data.blog_no - b.data.blog_no)

const pageNumbers = Array.from({ length: totalPages }, (_, i) => i + 1)

export const getStaticPaths = async () => {
  const blogs = await getCollection('blogs')
  
  const POSTS_PER_PAGE = 6
  const totalPages = Math.ceil(blogs.length / POSTS_PER_PAGE)

  return Array.from({ length: totalPages }, (_, i) => ({
    params: { page: (i + 1).toString() }
  }))
}
---

<style>
  .breadcrumb {
    display: flex;
    justify-content: center;
    font-size: 12px;
    margin: 5px;
  }

  .search-input {
    width: 300px;
    font-size: 12px;
    padding-left: 38px;
  }

  .pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    gap: 8px;
    margin-bottom: 40px;
    padding: 0;
  }
  .pagination li {
    display: inline;
  }
  .pagination a {
    padding: 8px 12px;
    border: 1px solid #fff;
    text-decoration: none;
    border-radius: 4px;
    color: #686868;
    transition: background-color 0.2s;
  }
  .pagination a:hover {
    color: #000;
  }
  .pagination a.active {
    font-weight: bold;
    color: #30baba;
  }
</style>

<BlogLayout title='Dataflow | Blogs'>
  <div class='px-[15%]'>
    <!-- Breadcrumb -->
    <nav aria-label='breadcrumb'>
      <ol class='pt-lg-4 pb-lg-4 pb-2 breadcrumb'>
        <li class='breadcrumb-item'><a href='index.html'>Homepage</a></li>
        <li class='breadcrumb-item active' aria-current='page'>
          Blog grid no sidebar
        </li>
      </ol>
    </nav>

    <!-- Page title  -->
    <div class='flex justify-between items-center'>
      <div class=''>
        <h1 class='' style='font-size: 40px; font-weight: 600;'>Blog grid</h1>
      </div>
      <div
        class='w-[40%] max-sm:w-full flex justify-end max-sm:justify-center'
        style='height: 38px;'
      >
        <div class='position-relative max-sm:w-1/2'>
          <i
            class='ai-search position-absolute top-50 start-0 translate-middle-y ms-3'
          ></i>
          <input
            id='search-bar'
            class='form-control search-input'
            style='border: 1px solid #D7DDE2; border-radius: 14px; height: 38px; '
            type='search'
            placeholder='Enter keyword'
          />
        </div>
      </div>
    </div>

    <div class=''>
      {
        updatedposts.length === 0 ? (
          <div class='text-center min-h-[100px]'>
            <h2 class='text-xl '>No posts found</h2>
          </div>
        ) : (
          <BlogGrid updatedposts={paginatedPosts} />
        )
      }
    </div>

    <!-- Pagination -->
    <ul class='pagination'>
      {
        pageNumbers.length < 6 &&
        pageNumbers.map((num) => (
          <li>
            <a
              href={`/blogs/${num}`}
              class={`${currentPage === num ? 'active' : ''}`}
            >
              {num}
            </a>
          </li>
        ))
      }
    </ul>
  </div>

  <!-- Subscription -->
  <section class='w-full' data-bs-theme='dark'>
    <div
      class='h-full bg-[#364152] min-h-[400px] max-sm:min-h-[500px] flex justify-center items-center max-md:flex-col'
    >
      <div class=''>
        <h2
          class='text-[55px] max-md:text-[40px] max-sm:text-[30px] max-sm:mt-[20px] font-bold w-[600px] max-md:w-[450px] max-sm:w-[90%] max-sm:pl-[20px] max-sm:pt-[30px]'
        >
          Stay up to date with important news!
        </h2>
      </div>
      <div>
        <div class='flex gap-4 my-4 max-sm:flex-col max-sm:ml-[40px]'>
          <div class='form-check text-[12px]'>
            <label class='form-check-label text-white' for='advert-updates'
              >Advertising Updates</label
            >
            <input
              class='form-check-input size-[16px]'
              id='advert-updates'
              type='checkbox'
              checked
            />
          </div>
          <div class='form-check text-[12px]'>
            <label class='form-check-label text-white' for='newsletter'
              >Daily Newsletter</label
            >
            <input
              class='form-check-input size-[16px]'
              id='newsletter'
              type='checkbox'
            />
          </div>
          <div class='form-check text-[12px]'>
            <label class='form-check-label text-white' for='week-in-review'
              >Week in Review</label
            >
            <input
              class='form-check-input size-[16px]'
              id='week-in-review'
              type='checkbox'
            />
          </div>
        </div>
        <div class='email-input max-sm:pb-10'>
          <div
            class='min-h-[50px] max-sm:w-[90%] flex items-center pl-5 p-[5px] max-sm:p-[2px] max-sm:pl-2 bg-white/5 backdrop:blur-xl rounded-2xl border-[1px] border-white/15 text-white'
          >
            <input
              id='email-input'
              class='w-[80%] bg-transparent p-2 outline-none placeholder:text-[12px]'
              type='text'
              placeholder='Your email'
            />
            <button
              id='subscribe-button'
              class='btn w-[25%] max-sm:w-max h-[45px] max-sm:h-[38px] max-sm:mr-[3px] max-sm:px-[5px] btn-primary rounded-xl text-[12px] tracking-wide font-normal'
              type='button'>Subscribe</button
            >
          </div>
          <div class='form-text mt-[5px]'>
            * Yes, I agree to the <a href='#' class='text-primary underline'
              >terms</a
            > and <a href='#' class='text-primary underline'>privacy policy</a>
          </div>
        </div>
      </div>
    </div>
  </section>
</BlogLayout>

<script>
  import { posts } from '../../content/blog/data'

  // Ensure this script runs after the DOM is fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    const searchBar = document.getElementById('search-bar') as HTMLInputElement
    const categoryFilter = document.getElementById(
      'category-filter'
    ) as HTMLSelectElement
    const paginationSelect = document.getElementById(
      'pagination-select'
    ) as HTMLSelectElement
    const loadMoreButton = document.getElementById(
      'load-more'
    ) as HTMLButtonElement
    const setpage = document.getElementById('setpage') as HTMLButtonElement
    const subscribeButton = document.getElementById(
      'subscribe-button'
    ) as HTMLButtonElement
    const emailInput = document.getElementById(
      'email-input'
    ) as HTMLInputElement

    let updatedPosts = posts.slice(0, 9)

    let pagecapacity = 9
    let pagecount = Math.ceil(posts.length / 9)

    renderPagination(9)

    function renderPagination(pageCapacity) {
      let pagecount = Math.ceil(posts.length / pageCapacity)
      const setpage = document.getElementById('setpage')
      setpage.innerHTML = ''

      for (let i = 1; i <= pagecount; i++) {
        let linkitem = document.createElement('li')
        linkitem.classList.add('page-item')
        linkitem.innerHTML = `<a class="page-link" href="#">${i}</a>`
        setpage.appendChild(linkitem)
      }
      addPaginationEventListeners()
    }

    function addPaginationEventListeners() {
      const pageLinks = document.querySelectorAll('#setpage .page-link')
      pageLinks.forEach((link) => {
        link.addEventListener('click', function (event) {
          event.preventDefault()
          const pageNumber = this.textContent.trim()

          updatedPosts = posts.slice(
            (pageNumber - 1) * pagecapacity,
            (pageNumber - 1) * pagecapacity + pagecapacity
          )
          renderPosts(updatedPosts)
          document
            .querySelectorAll('#setpage .page-item')
            .forEach((item) => item.classList.remove('active'))
          this.parentElement.classList.add('active')
        })
      })
    }

    function renderPosts(posts: Array<any>) {
      const blogGrid = document.getElementById('blog-grid')!
      blogGrid.innerHTML = ''

      posts.forEach((post) => {
        const article = document.createElement('article')
        article.classList.add('masonry-grid-item')

        article.innerHTML = `
                        <div class="card border-0 bg-secondary">
                            ${post.image ? `<a href="${post.url}"><img class="card-img-top" src="${post.image}" alt="Post image" /></a>` : ''}
                            <div class="card-body pb-4">
                                <div class="d-flex align-items-center mb-4 mt-n1">
                                    <span class="fs-sm text-body-secondary">${post.time}</span>
                                    <span class="fs-xs opacity-20 mx-3">|</span>
                                    <a class="badge text-nav fs-xs border" href="#">${post.category}</a>
                                </div>
                                <h3 class="h4 card-title">
                                    <a href="${post.url}">${post.title}</a>
                                </h3>
                                <p class="card-text">${post.description}</p>
                            </div>
                            <div class="card-footer pt-3">
                                <a href="${post.url}"><p class="font-bold text-lg hover:text-primary" style="font-family:Arimo;">Know more</p></a>
                            </div>
                        </div>
                    `

        blogGrid.appendChild(article)
      })
    }

    renderPosts(updatedPosts)

    searchBar.addEventListener('input', (e: Event) => {
      const target = e.target as HTMLInputElement
      const query = target.value.toLowerCase()
      const filteredPosts = posts.filter((post) =>
        post.title.toLowerCase().includes(query)
      )
      updatedPosts = filteredPosts
      renderPosts(updatedPosts)
    })

    categoryFilter.addEventListener('change', (e: Event) => {
      const target = e.target as HTMLSelectElement
      const category = target.value

      if (category === 'all') {
        updatedPosts = posts
      } else {
        updatedPosts = posts
          .filter((data) => data.category === category)
          .slice(0, 10)
      }

      renderPosts(updatedPosts)
    })

    paginationSelect.addEventListener('change', (e: Event) => {
      const target = e.target as HTMLSelectElement
      const categoryFilter = document.getElementById(
        'category-filter'
      ) as HTMLSelectElement
      const category = categoryFilter.value
      const postsPerPage = parseInt(target.value, 10)
      pagecapacity = postsPerPage
      let updated
      if (category === 'all') {
        updated = posts
      } else {
        updated = posts.filter((data) => data.category === category)
      }
      updatedPosts = updated.slice(0, postsPerPage)
      renderPosts(updatedPosts)
      renderPagination(postsPerPage)
    })

    loadMoreButton.addEventListener('click', () => {
      const categoryFilter = document.getElementById(
        'category-filter'
      ) as HTMLSelectElement
      const category = categoryFilter.value
      let updated
      if (category === 'all') {
        updated = posts
      } else {
        updated = posts.filter((data) => data.category === category)
      }
      updatedPosts = updated.slice(0, updatedPosts.length + 5)
      renderPosts(updatedPosts)
    })

    subscribeButton.addEventListener('click', () => {
      const email = emailInput.value
      if (email) {
      } else {
      }
    })
  })
</script>
